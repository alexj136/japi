PARSER_BEGIN(Parser)
package parser;

import syntax.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class Parser {

    /**
     * Main method parses and pretty-prints the contents of the japi source file
     * whose name is provided as the sole command line argument.
     * @param args The command line arguments - should be a single file name
     */
    public static void main(String[] args)
    throws ParseException, FileNotFoundException {
        if(!(args.length == 1)) {
            System.out.println("Please provide exactly one filename.");
            return;
        }
        Parser parser = new Parser(new FileInputStream(args[0]));
        SyntaxElement prog = parser.Expression();
        System.out.print(prog.prettyPrint(0));
    }
}

PARSER_END(Parser)

SKIP :
    { " "
    | "\t"
    | "\n"
    | "\r"
    }

TOKEN :
    { "receive"
    | "send"
    | "over"
    | "then"
    | "concurrently"
    | "and"
    | "restricting"
    | "in"
    | "repeatedly"
    | "end"
    | <ID: (["a"-"z"])+> }

void Input() : {} { Expression() <EOF> }

SyntaxElement Expression() : { SyntaxElement e1, e2; Token n1, n2; }
    { "receive" n1=<ID> "over" n2=<ID> "then" e1=Expression()
        {
            return new Receive(new ParserName(n2.toString()),
                    new ParserName(n1.toString()), e1);
        }
    | "send" n1=<ID> "over" n2=<ID> "then" e1=Expression()
        {
            return new Send(new ParserName(n2.toString()),
                    new ParserName(n1.toString()), e1);
        }
    | "concurrently" e1=Expression() "and" e2=Expression()
        {
            return new Parallel(e1, e2);
        }
    | "restricting" n1=<ID> "in" e1=Expression()
        {
            return new Restrict(new ParserName(n1.toString()), e1);
        }
    | "repeatedly" e1=Expression()
        {
            return new Replicate(e1);
        }
    | "end"
        {
            return new Done();
        }
    }
