PARSER_BEGIN(Parser)
package parser;

import parsersyntax.*;
import java.io.File;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class Parser {

    /**
     * Main method parses and pretty-prints the contents of the japi source file
     * whose name is provided as the sole command line argument.
     * @param args The command line arguments - should be a single file name
     */
    public static void main(String[] args) {

        // Check arguments were supplied correctly
        if(!(args.length == 1)) {
            System.out.println("Please provide exactly one filename.");
            return;
        }

        File file = new File(args[0]);

        // Check the supplied file exists
        if(!file.exists()) {
            System.out.println("File does not exist.");
            return;
        }

        // Check the supplied file isn't a directory
        if(file.isDirectory()) {
            System.out.println("File is a directory.");
            return;
        }

        // Try to open the file
        FileInputStream input;
        try {
            input = new FileInputStream(file);
        }
        catch(FileNotFoundException e) {
            System.out.println("File could not be opened.");
            return;
        }

        // Print either the prettyPrint of the AST or the error message supplied
        // with the ParseException if parsing fails.
        String toPrint;
        try {
            toPrint = parseStream(input).prettyPrint(0);
        }
        catch(ParseException e) {
            toPrint = "Could not parse the file:\n" + e.getMessage();
        }
        System.out.println(toPrint);
    }

    /**
     * Parse some input to obtain an AST.
     * @param input a java.io.InputStream containing text (ideally) representing
     * a japi program
     * @return an AST (a Term object) representing the parsed program
     * @throws ParseException if the input could not be parsed (i.e. if there
     * was a syntax error in the program)
     */
    public static Term parseStream(InputStream input) throws ParseException {
        return new Parser(input).expression();
    }
}

PARSER_END(Parser)

SKIP :
    { " "
    | "\t"
    | "\n"
    | "\r"
    }

TOKEN :
    { "receive"
    | "send"
    | "over"
    | "then"
    | "concurrently"
    | "and"
    | "restricting"
    | "in"
    | "repeatedly"
    | "end"
    | <ID: (["a"-"z"])+> }

void input() : {} { expression() <EOF> }

Term expression() : { Term e1, e2; Token n1, n2; }
    { "receive" n1=<ID> "over" n2=<ID> "then" e1=expression()
        {
            return new Receive(n2.toString(), n1.toString(), e1);
        }
    | "send" n1=<ID> "over" n2=<ID> "then" e1=expression()
        {
            return new Send(n2.toString(), n1.toString(), e1);
        }
    | "concurrently" e1=expression() "and" e2=expression()
        {
            return new Parallel(e1, e2);
        }
    | "restricting" n1=<ID> "in" e1=expression()
        {
            return new Restrict(n1.toString(), e1);
        }
    | "repeatedly" e1=expression()
        {
            return new Replicate(e1);
        }
    | "end"
        {
            return new End();
        }
    }
