PARSER_BEGIN(Parser)
package parser;

import syntax.*;
import java.io.File;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;

public class Parser {

    /**
     * Parse some input to obtain an AST.
     * @param input a java.io.InputStream containing text (ideally) representing
     * a japi program
     * @return an AST (a PiTerm object) representing the parsed program
     * @throws ParseException if the input could not be parsed (i.e. if there
     * was a syntax error in the program)
     */
    public static PiTerm parseStream(InputStream input) throws ParseException {
        return new Parser(input).term();
    }
}

PARSER_END(Parser)

SKIP :
    { " "
    | "\t"
    | "\n"
    | "\r"
    | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
    | <"/*" (~[])* "*/">
    }

TOKEN :
    { "<"
    | ">"
    | "("
    | ")"
    | "."
    | "["
    | "|"
    | "]"
    | "{"
    | "+"
    | "}"
    | "new"
    | "in"
    | "!"
    | "0"
    | <ID: (["a"-"z"])+>
    }

void input() : {} { term() <EOF> }

/* The pi-calculus grammar used is as follows:
 *
 *     P ::= "x(a0, a1, ... aN).P" | "x<a0, a1, ... aN>.P" | "[P0|P1|...PN]"
 *         | "new x in P" | "!P" | "{P0 + P1 + ... PN}" | "0"
 *
 * which, in a more concrete, non-left-recursive form is:
 *
 *     TERM         ::= "x(RECECONT . TERM" | "x<SENDCONT . TERM" | "[ PARACONT" | "new x in TERM" | "!TERM"
 *                    | "{ TERM + TERM SUMCONT" | "0"
 *     SUMCONT      ::= "}" |  " + TERM SUMCONT"
 *     PARACONT     ::= "]" | "TERMSM PARACONTCONT"
 *     PARACONTCONT ::= "]" | "| TERMSM PARACONTCONT"
 *     RECECONT     ::= ")" | "y RCONTC"
 *     RECECONTCONT ::= ")" | ", y RCONTC"
 *     SENDCONT     ::= ">" | "y SENDCONTCONT"
 *     SENDCONTCONT ::= ">" | ", y SENDCONTCONT"
 *
 * This is the grammar used in the implementation below.
 */
PiTerm<String> term() : { PiTerm<String> tm0, tm1; ArrayList<LambdaTerm<String>> exps; ArrayList<PiTerm<String>> tmList; Token n; }
{
    LOOKAHEAD(2)
    n=<ID> "(" exps=receCont() "." tm0=term()
    {
        return new Receive<String>(n.toString(), exps, tm0);
    }
    |
    n=<ID> "<" exps=sendCont() "." tm0=term()
    {
        return new Send<String>(n.toString(), exps, tm0);
    }
    |
    "[" tm0=paraCont()
    {
        return tm0;
    }
    |
    "new" n=<ID> "in" tm0=term()
    {
        return new Restrict<String>(n.toString(), tm0);
    }
    |
    "!" tm0=term()
    {
        return new Replicate<String>(tm0);
    }
    |
    "{" tm0=term() "+" tm1=term() tmList=sumCont()
    {
        tmList.add(0, tm1);
        tmList.add(0, tm0);
        return new NDSum(tmList);
    }
    |
    "0"
    {
        return new Parallel<String>(new ArrayList<PiTerm<String>>());
    }
}

ArrayList<PiTerm<String>> sumCont() : { PiTerm<String> tm; ArrayList<PiTerm<String>> tmList; }
{
    "}"
    {
        return new ArrayList<PiTerm<String>>();
    }
    |
    "+" tm=term() tmList=sumCont()
    {
        tmList.add(0, tm);
        return tmList;
    }
}

PiTerm<String> paraCont() : { PiTerm<String> e; ArrayList<PiTerm<String>> rest; }
{
    "]"
    {
        return new Parallel<String>(new ArrayList<PiTerm<String>>());
    }
    |
    e=term() rest=paraContCont()
    {
        rest.add(0, e);
        return new Parallel<String>(rest);
    }
}

ArrayList<PiTerm<String>> paraContCont() : { PiTerm<String> e; ArrayList<PiTerm<String>> rest; }
{
    "]"
    {
        return new ArrayList<PiTerm<String>>();
    }
    |
    "|" e=term() rest=paraContCont()
    {
        rest.add(0, e);
        return rest;
    }
}

ArrayList<LambdaTerm<String>> sendCont() : { Token n; ArrayList<LambdaTerm<String>> rest; }
{
    ">"
    {
        return new ArrayList<LambdaTerm<String>>();
    }
    |
    n=<ID> rest=sendContCont()
    {
        rest.add(0, new Variable<String>(n.toString()));
        return rest;
    }
}

ArrayList<LambdaTerm<String>> sendContCont() : { Token n; ArrayList<LambdaTerm<String>> rest; }
{
    ">"
    {
        return new ArrayList<LambdaTerm<String>>();
    }
    |
    "," n=<ID> rest=sendContCont()
    {
        rest.add(0, new Variable<String>(n.toString()));
        return rest;
    }
}

ArrayList<LambdaTerm<String>> receCont() : { Token n; ArrayList<LambdaTerm<String>> rest; }
{
    ")"
    {
        return new ArrayList<LambdaTerm<String>>();
    }
    |
    n=<ID> rest=receContCont()
    {
        rest.add(0, new Variable<String>(n.toString()));
        return rest;
    }
}

ArrayList<LambdaTerm<String>> receContCont() : { Token n; ArrayList<LambdaTerm<String>> rest; }
{
    ")"
    {
        return new ArrayList<LambdaTerm<String>>();
    }
    |
    "," n=<ID> rest=receContCont()
    {
        rest.add(0, new Variable<String>(n.toString()));
        return rest;
    }
}
