PARSER_BEGIN(Parser)
package parser;

import syntax.*;
import java.io.File;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;

public class Parser {

    /**
     * Parse some input to obtain an AST.
     * @param input a java.io.InputStream containing text (ideally) representing
     * a japi program
     * @return an AST (a PiTerm object) representing the parsed program
     * @throws ParseException if the input could not be parsed (i.e. if there
     * was a syntax error in the program)
     */
    public static PiTerm parseStream(InputStream input) throws ParseException {
        return new Parser(input).expression();
    }
}

PARSER_END(Parser)

SKIP :
    { " "
    | "\t"
    | "\n"
    | "\r"
    | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
    | <"/*" (~[])* "*/">
    }

TOKEN :
    { "<"
    | ">"
    | "("
    | ")"
    | "."
    | "["
    | "|"
    | "]"
    | "new"
    | "in"
    | "!"
    | "0"
    | <ID: (["a"-"z"])+>
    }

void input() : {} { expression() <EOF> }

/* The pi-calculus grammar used is as follows:
 *
 *     P ::= "x(a0, a1, ... aN).P" | "x<a0, a1, ... aN>.P" | "[P0|P1|...PN]"
 *         | "new x in P" | "!P" | "0"
 *
 * which, in more concrete notation is:
 *
 *     P ::= "x(R.P" | "x<S.P" | "[Q" | "new x in P" | "!P" | "0"
 *     Q ::= "]" | "PQ'"
 *     Q'::= "]" | "|PQ'"
 *     R ::= ")" | "yR'"
 *     R'::= ")" | ", yR'"
 *     S ::= ">" | "yS'"
 *     S'::= ">" | ", yS'"
 *
 * This is the grammar used in the implementation below.
 */
PiTerm<String> expression() : { PiTerm<String> exp; ArrayList<String> names; Token n; }
{
    LOOKAHEAD(2)
    n=<ID> "(" names=receiveCont() "." exp=expression()
    {
        return new Receive<String>(n.toString(), names, exp);
    }
    |
    n=<ID> "<" names=sendCont() "." exp=expression()
    {
        return new Send<String>(n.toString(), names, exp);
    }
    |
    "[" exp=parallelCont()
    {
        return exp;
    }
    |
    "new" n=<ID> "in" exp=expression()
    {
        return new Restrict<String>(n.toString(), exp);
    }
    |
    "!" exp=expression()
    {
        return new Replicate<String>(exp);
    }
    |
    "0"
    {
        return new Parallel<String>(new ArrayList<PiTerm<String>>());
    }
}

PiTerm<String> parallelCont() : { PiTerm<String> e; ArrayList<PiTerm<String>> rest; }
{
    "]"
    {
        return new Parallel<String>(new ArrayList<PiTerm<String>>());
    }
    |
    e=expression() rest=parallelContCont()
    {
        rest.add(0, e);
        return new Parallel<String>(rest);
    }
}

ArrayList<PiTerm<String>> parallelContCont() : { PiTerm<String> e; ArrayList<PiTerm<String>> rest; }
{
    "]"
    {
        return new ArrayList<PiTerm<String>>();
    }
    |
    "|" e=expression() rest=parallelContCont()
    {
        rest.add(0, e);
        return rest;
    }
}

ArrayList<String> sendCont() : { Token n; ArrayList<String> rest; }
{
    ">"
    {
        return new ArrayList<String>();
    }
    |
    n=<ID> rest=sendContCont()
    {
        rest.add(0, n.toString());
        return rest;
    }
}

ArrayList<String> sendContCont() : { Token n; ArrayList<String> rest; }
{
    ">"
    {
        return new ArrayList<String>();
    }
    |
    "," n=<ID> rest=sendContCont()
    {
        rest.add(0, n.toString());
        return rest;
    }
}

ArrayList<String> receiveCont() : { Token n; ArrayList<String> rest; }
{
    ")"
    {
        return new ArrayList<String>();
    }
    |
    n=<ID> rest=receiveContCont()
    {
        rest.add(0, n.toString());
        return rest;
    }
}

ArrayList<String> receiveContCont() : { Token n; ArrayList<String> rest; }
{
    ")"
    {
        return new ArrayList<String>();
    }
    |
    "," n=<ID> rest=receiveContCont()
    {
        rest.add(0, n.toString());
        return rest;
    }
}
