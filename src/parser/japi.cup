package parser;

import java_cup.runtime.ScannerBuffer;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import syntax.*;
import utils.Pair;
import utils.Triple;
import java.util.ArrayList;
import java.util.HashMap;
import java.io.InputStream;
import java.io.InputStreamReader;

parser code {:
    public Parser(Lexer lexer, ComplexSymbolFactory csf) { super(lexer, csf); }

    public static Triple<PiTerm, HashMap<String, Integer>, Integer>
            parseStream(InputStream input) throws Exception {

        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        Lexer lexer = new Lexer(new InputStreamReader(input), csf);
        PiTerm parsedTerm = (PiTerm)
                (new Parser(new ScannerBuffer(lexer), csf).parse().value);
        Pair<HashMap<String, Integer>, Integer> nameInfo = lexer.getNameInfo();
        return Triple.make(parsedTerm, nameInfo.frst, nameInfo.scnd);
    }
:};

terminal            LANGLE, // <
                    RANGLE, // >
                    LPAREN, // (
                    RPAREN, // )
                    LSQUAR, // [
                    RSQUAR, // ]
                    LCURLY, // {
                    RCURLY, // }
                    DOT,    // .
                    COMMA,  // ,
                    BAR,    // |
                    SUM,    // +
                    NEW,    // new
                    IN,     // in
                    BANG,   // !
                    ZERO,   // 0
                    BSLASH, // \
                    PRN, ABS, VAR, APP; // PRECEDENCE DECLARATORS
terminal Integer    IDENT;  // [a-z_]+

/* The pi-calculus grammar used is as follows:
 *
 * P ::= "x(a0, a1, ... aN).P" | "x<E0, E1, ... EN>.P" | "[P0|P1|...PN]"
 * | "new x in P" | "!P" | "{P0 + P1 + ... PN}" | "0"
 * E ::= "\x -> E" | "E E" | "x" | "( E )"
 */

non terminal PiTerm                 piTerm;
non terminal ArrayList<PiTerm>      parTerms;
non terminal ArrayList<PiTerm>      moreParTerms;
non terminal ArrayList<PiTerm>      sumTerms;
non terminal ArrayList<PiTerm>      moreSumTerms;
non terminal LambdaTerm             lamTerm;
non terminal ArrayList<LambdaTerm>  lamTerms;
non terminal ArrayList<LambdaTerm>  moreLamTerms;
non terminal ArrayList<Integer>     names;
non terminal ArrayList<Integer>     moreNames;

precedence left PRN;
precedence left VAR;
precedence left APP;
precedence left ABS;

start with piTerm;

piTerm        ::= IDENT:c names:n DOT piTerm:s     {: RESULT = new Receive(c, n, s);         :}
                | IDENT:c lamTerms:e DOT piTerm:s  {: RESULT = new Send(c, e, s);            :}
                | parTerms:s                       {: RESULT = new Parallel(s);              :}
                | NEW IDENT:c IN piTerm:s          {: RESULT = new Restrict(c, s);           :}
                | BANG piTerm:s                    {: RESULT = new Replicate(s);             :}
                | sumTerms:s                       {: RESULT = new NDSum(s);                 :}
                | ZERO                    {: RESULT = new Parallel(new ArrayList<PiTerm>()); :}
                ;

names         ::= LPAREN RPAREN                    {: RESULT = new ArrayList<Integer>();     :}
                | LPAREN IDENT:c moreNames:n       {: n.add(0, c); RESULT = n;               :}
                ;

moreNames     ::= RPAREN                           {: RESULT = new ArrayList<Integer>();     :}
                | COMMA IDENT:c moreNames:n        {: n.add(0, c); RESULT = n;               :}
                ;

lamTerms      ::= LANGLE RANGLE                    {: RESULT = new ArrayList<LambdaTerm>();  :}
                | LANGLE lamTerm:s moreLamTerms:ss {: ss.add(0, s); RESULT = ss;             :}
                ;

moreLamTerms  ::= RANGLE                           {: RESULT = new ArrayList<LambdaTerm>();  :}
                | COMMA lamTerm:s moreLamTerms:ss  {: ss.add(0, s); RESULT = ss;             :}
                ;

parTerms      ::= LSQUAR RSQUAR                    {: RESULT = new ArrayList<PiTerm>();      :}
                | LSQUAR piTerm:s moreParTerms:ss  {: ss.add(0, s); RESULT = ss;             :}
                ;

moreParTerms  ::= RSQUAR                           {: RESULT = new ArrayList<PiTerm>();      :}
                | BAR piTerm:s moreParTerms:ss     {: ss.add(0, s); RESULT = ss;             :}
                ;

sumTerms      ::= LCURLY RCURLY                    {: RESULT = new ArrayList<PiTerm>();      :}
                | LCURLY piTerm:s moreSumTerms:ss  {: ss.add(0, s); RESULT = ss;             :}
                ;

moreSumTerms  ::= RCURLY                           {: RESULT = new ArrayList<PiTerm>();      :}
                | SUM piTerm:s moreSumTerms:ss     {: ss.add(0, s); RESULT = ss;             :}
                ;

lamTerm       ::= LPAREN lamTerm:s RPAREN          {: RESULT = s;                            :} %prec PRN
                | BSLASH IDENT:c DOT lamTerm:s     {: RESULT = new Abstraction(c, s);        :} %prec ABS
                | IDENT:c                          {: RESULT = new Variable(c);              :} %prec VAR
                | lamTerm:s1 lamTerm:s2            {: RESULT = new Application(s1, s2);      :} %prec APP
                ;
